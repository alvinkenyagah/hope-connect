import React, { useState, useEffect } from 'react';
import { BrowserRouter, Routes, Route, Navigate } from 'react-router-dom'; // Import Navigate
import Navbar from './components/Navbar.jsx';
import LandingPage from './pages/LandingPage.jsx';
import SignupPage from './pages/SignupPage.jsx';
import LoginPage from './pages/LoginPage.jsx';
import UserDashboard from './pages/UserDashboard.jsx'; 
import AdminDashboard from './pages/AdminDashboard.jsx'; 
import CounselorDashboard from './pages/CounselorDashboard.jsx'; 
import NotFoundPage from './pages/NotFoundPage.jsx';
import ChatPage from './pages/ChatPage.jsx';
import AppointmentsPage from './pages/AppointmentsPage.jsx'; // ðŸŽ¯ Import the new page

function App() {
Â  // Initialize state by trying to read from localStorage
Â  const initialToken = localStorage.getItem('authToken');
Â  const initialUser = localStorage.getItem('currentUser') ? JSON.parse(localStorage.getItem('currentUser')) : null;

Â  const [isLoggedIn, setIsLoggedIn] = useState(!!initialToken); 
Â  const [currentUser, setCurrentUser] = useState(initialUser);
Â  const [authToken, setAuthToken] = useState(initialToken);

Â  // --- Core Persistence Logic: useEffect ---
Â  useEffect(() => {
Â  Â  if (authToken && currentUser) {
Â  Â  Â  localStorage.setItem('authToken', authToken);
Â  Â  Â  localStorage.setItem('currentUser', JSON.stringify(currentUser));
Â  Â  Â  setIsLoggedIn(true);
Â  Â  } else {
Â  Â  Â  localStorage.removeItem('authToken');
Â  Â  Â  localStorage.removeItem('currentUser');
Â  Â  Â  setIsLoggedIn(false);
Â  Â  }
Â  }, [authToken, currentUser]);
Â  // ------------------------------------------

Â  const handleLoginSuccess = (user, token) => {
Â  Â  setCurrentUser(user);
Â  Â  setAuthToken(token);
Â  Â  console.log("Login success handled and persisted.");
Â  };

Â  const handleLogout = () => {
Â  Â  setCurrentUser(null);
Â  Â  setAuthToken(null);
Â  Â  console.log("Logout handled and storage cleared.");
Â  };

Â  // Helper function for unauthorized redirects
Â  const UnauthorizedFallback = () => <Navigate to="/login" replace />;

Â  return (
Â  Â  <BrowserRouter>
Â  Â  Â  <Navbar isLoggedIn={isLoggedIn} onLogout={handleLogout} currentUser={currentUser} /> 
Â  Â  Â  
Â  Â  Â  <main>
Â  Â  Â  Â  <Routes>
Â  Â  Â  Â  Â  <Route path="/" element={<LandingPage />} /> 
Â  Â  Â  Â  Â  <Route path="/signup" element={<SignupPage />} /> 
Â  Â  Â  Â  Â  <Route path="/login" element={<LoginPage onLoginSuccess={handleLoginSuccess} />} /> 
Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  {/* 1. Protected Counselor Dashboard Route (Role: counselor) */}
Â  Â  Â  Â  Â  <Route path="/counselor-dashboard" element={
Â  Â  Â  Â  Â  Â  isLoggedIn && currentUser?.role === 'counselor'
Â  Â  Â  Â  Â  Â  Â  ? <CounselorDashboard currentUser={currentUser} authToken={authToken} /> 
Â  Â  Â  Â  Â  Â  Â  : <UnauthorizedFallback /> // Block access
Â  Â  Â  Â  Â  } />
Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  {/* 2. Protected Admin Route (Role: admin) */}
Â  Â  Â  Â  Â  <Route path="/admin" element={
Â  Â  Â  Â  Â  Â  isLoggedIn && currentUser?.role === 'admin' 
Â  Â  Â  Â  Â  Â  Â  ? <AdminDashboard currentUser={currentUser} authToken={authToken} /> 
Â  Â  Â  Â  Â  Â  Â  : <UnauthorizedFallback /> // Block access
Â  Â  Â  Â  Â  } />
Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  {/* 3. Protected Victim Dashboard Route (Role: victim) */}
Â  Â  Â  Â  Â  <Route path="/dashboard" element={
Â  Â  Â  Â  Â  Â  isLoggedIn && currentUser?.role === 'victim'
Â  Â  Â  Â  Â  Â  Â  ? <UserDashboard currentUser={currentUser} authToken={authToken} /> 
Â  Â  Â  Â  Â  Â  Â  : <UnauthorizedFallback /> // Block access or redirect to login
Â  Â  Â  Â  Â  } />


Â  Â  Â  Â  Â  {/* ðŸŽ¯ 4. APPOINTMENTS ROUTE (For both 'victim' and 'counselor') */}
Â  Â  Â  Â  Â  <Route path="/appointments" element={
Â  Â  Â  Â  Â  Â  isLoggedIn && (currentUser?.role === 'victim' || currentUser?.role === 'counselor')
Â  Â  Â  Â  Â  Â  Â  ? <AppointmentsPage currentUser={currentUser} authToken={authToken} /> 
Â  Â  Â  Â  Â  Â  Â  : <UnauthorizedFallback /> // Block access for logged-out or Admin users
Â  Â  Â  Â  Â  } />


Â  Â  Â  Â  Â  {/* 5. Chat Route */}
Â  Â  Â  Â  Â  <Route
Â  Â  Â  Â  Â  Â  path="/chat"
Â  Â  Â  Â  Â  Â  element={
Â  Â  Â  Â  Â  Â  Â  isLoggedIn ? (
Â  Â  Â  Â  Â  Â  Â  Â  <ChatPage currentUser={currentUser} />
Â  Â  Â  Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  Â  Â  Â  <UnauthorizedFallback />
Â  Â  Â  Â  Â  Â  Â  )
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  <Route path="*" element={<NotFoundPage />} /> 
Â  Â  Â  Â  </Routes>
Â  Â  Â  </main>
Â  Â  </BrowserRouter>
Â  );
}

export default App;